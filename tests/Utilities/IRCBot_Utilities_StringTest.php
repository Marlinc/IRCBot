<?php

require_once dirname(__FILE__) . '/../../src/Utilities/String.php';

/**
 * Test class for IRCBot_Utilities_String.
 * Generated by PHPUnit on 2011-12-06 at 21:35:56.
 */
class IRCBot_Utilities_StringTest extends PHPUnit_Framework_TestCase {

    /**
     * @var IRCBot_Utilities_String
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new IRCBot_Utilities_String;
        $testString = 'Hello! This sentence should be tokenized.';
        IRCBot_Utilities_String::tokenize($testString);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers {className}::{origMethodName}
     */
    public function testTokenize() {
        $testString = 'Testing.Tokenize.Will.It.Work?';
        $tokens = IRCBot_Utilities_String::tokenize($testString, '.', true);
        $expected = array('Testing', 'Tokenize', 'Will', 'It', 'Work?');
        $this->assertEquals($expected, $tokens);
    }

    /**
     * @covers {className}::{origMethodName}
     */
    public function testToken() {
        $this->assertEquals('Hello!', IRCBot_Utilities_String::token('0'));
        $this->assertEquals('This sentence', IRCBot_Utilities_String::token('1-2'));
    }

    /**
     * @covers {className}::{origMethodName}
     */
    public function testTokenizeCleanup() {
        IRCBot_Utilities_String::tokenizeCleanup();
        $this->assertNotEquals('Hello!', IRCBot_Utilities_String::token('0'));
    }

    /**
     * @covers {className}::{origMethodName}
     */
    public function testRemoveNewlines() {
        $string = 'A string with ' . PHP_EOL . ' much ' . PHP_EOL . PHP_EOL
            . ' newlines';
        $newString = IRCBot_Utilities_String::removeNewlines($string);  
        $this->assertEquals('A string with much newlines', $newString);
    }

}

?>
